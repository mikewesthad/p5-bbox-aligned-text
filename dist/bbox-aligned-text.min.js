!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var i;i="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,i.BboxAlignedText=t()}}(function(){return function t(i,e,s){function o(h,r){if(!e[h]){if(!i[h]){var a="function"==typeof require&&require;if(!r&&a)return a(h,!0);if(n)return n(h,!0);var f=new Error("Cannot find module '"+h+"'");throw f.code="MODULE_NOT_FOUND",f}var c=e[h]={exports:{}};i[h][0].call(c.exports,function(t){var e=i[h][1][t];return o(e?e:t)},c,c.exports,t,i,e,s)}return e[h].exports}for(var n="function"==typeof require&&require,h=0;h<s.length;h++)o(s[h]);return o}({1:[function(t,i,e){function s(t,i,e,o){this._font=t,this._text=i,this._fontSize=void 0!==e?e:12,this.p=o||window,this._rotation=0,this._hAlign=s.ALIGN.CENTER,this._vAlign=s.BASELINE.CENTER,this._calculateMetrics(!0)}i.exports=s,s.ALIGN={LEFT:"left",CENTER:"center",RIGHT:"right"},s.BASELINE={BOX_TOP:"top",BOX_CENTER:"center",BOM_BOTTOM:"bottom",FONT_CENTER:"font_center",ALPHABETIC:"alphabetic"},s.prototype.setText=function(t){this._text=t,this._calculateMetrics(!1)},s.prototype.setTextSize=function(t){this._fontSize=t,this._calculateMetrics(!0)},s.prototype.setRotation=function(t){this._rotation=t},s.prototype.setAnchor=function(t,i){this._hAlign=t||s.ALIGN.CENTER,this._vAlign=i||s.BASELINE.CENTER},s.prototype.getBbox=function(t,i){var e=this._calculateAlignedCoords(t,i);return{x:e.x+this._boundsOffset.x,y:e.y+this._boundsOffset.y,w:this.width,h:this.height}},s.prototype.draw=function(t,i,e){e=e||!1;var s={x:void 0!==t?t:0,y:void 0!==i?i:0};if(this.p.push(),this._rotation&&(s=this._calculateRotatedCoords(s.x,s.y,this._rotation),this.p.rotate(this._rotation)),s=this._calculateAlignedCoords(s.x,s.y),this.p.textAlign(this.p.LEFT,this.p.BASELINE),this.p.textFont(this._font),this.p.textSize(this._fontSize),this.p.text(this._text,s.x,s.y),e){this.p.stroke(200);var o=s.x+this._boundsOffset.x,n=s.y+this._boundsOffset.y;this.p.noFill(),this.p.rect(o,n,this.width,this.height)}this.p.pop()},s.prototype._calculateRotatedCoords=function(t,i,e){var s=Math.cos(e)*t+Math.cos(Math.PI/2-e)*i,o=-Math.sin(e)*t+Math.sin(Math.PI/2-e)*i;return{x:s,y:o}},s.prototype._calculateAlignedCoords=function(t,i){var e,o;switch(this._hAlign){case s.ALIGN.LEFT:e=t;break;case s.ALIGN.CENTER:e=t-this.halfWidth;break;case s.ALIGN.RIGHT:e=t-this.width;break;default:e=t,console.log("Unrecognized horizonal align:",this._hAlign)}switch(this._vAlign){case s.BASELINE.TOP:o=i-this._boundsOffset.y;break;case s.BASELINE.CENTER:o=i+this._distBaseToMid;break;case s.BASELINE.BOTTOM:o=i-this._distBaseToBottom;break;case s.BASELINE.FONT_CENTER:o=i-this._descent+(this._ascent+this._descent)/2;break;case s.BASELINE.ALPHABETIC:o=i;break;default:o=i,console.log("Unrecognized vertical align:",this._vAlign)}return{x:e,y:o}},s.prototype._calculateMetrics=function(t){var i=this._font.textBounds(this._text,1e3,1e3,this._fontSize);i.x-=1e3,i.y-=1e3,t&&(this._ascent=this._font._textAscent(this._fontSize),this._descent=this._font._textDescent(this._fontSize)),this.width=i.w,this.height=i.h,this.halfWidth=this.width/2,this.halfHeight=this.height/2,this._boundsOffset={x:i.x,y:i.y},this._distBaseToMid=Math.abs(i.y)-this.halfHeight,this._distBaseToBottom=this.height-Math.abs(i.y)}},{}]},{},[1])(1)});
//# sourceMappingURL=data:application/json;base64,
