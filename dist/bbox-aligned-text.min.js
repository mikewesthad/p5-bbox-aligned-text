!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var i;i="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,i.BboxAlignedText=t()}}(function(){return function t(i,e,o){function s(h,r){if(!e[h]){if(!i[h]){var a="function"==typeof require&&require;if(!r&&a)return a(h,!0);if(n)return n(h,!0);var _=new Error("Cannot find module '"+h+"'");throw _.code="MODULE_NOT_FOUND",_}var f=e[h]={exports:{}};i[h][0].call(f.exports,function(t){var e=i[h][1][t];return s(e?e:t)},f,f.exports,t,i,e,o)}return e[h].exports}for(var n="function"==typeof require&&require,h=0;h<o.length;h++)s(o[h]);return s}({1:[function(t,i,e){function o(t,i,e,s){this._font=t,this._text=i,this._fontSize=void 0!==e?e:12,this.p=s||window,this._rotation=0,this._hAlign=o.ALIGN.BOX_CENTER,this._vAlign=o.BASELINE.BOX_CENTER,this._calculateMetrics(!0)}i.exports=o,o.ALIGN={BOX_LEFT:"box_left",BOX_CENTER:"box_center",BOX_RIGHT:"box_right"},o.BASELINE={BOX_TOP:"box_top",BOX_CENTER:"box_center",BOX_BOTTOM:"box_bottom",FONT_CENTER:"font_center",ALPHABETIC:"alphabetic"},o.prototype.setText=function(t){this._text=t,this._calculateMetrics(!1)},o.prototype.setTextSize=function(t){this._fontSize=t,this._calculateMetrics(!0)},o.prototype.setRotation=function(t){this._rotation=t},o.prototype.setAnchor=function(t,i){this._hAlign=t||o.ALIGN.CENTER,this._vAlign=i||o.BASELINE.CENTER},o.prototype.getBbox=function(t,i){var e=this._calculateAlignedCoords(t,i);return{x:e.x+this._boundsOffset.x,y:e.y+this._boundsOffset.y,w:this.width,h:this.height}},o.prototype.draw=function(t,i,e){e=e||!1;var o={x:void 0!==t?t:0,y:void 0!==i?i:0};if(this.p.push(),this._rotation&&(o=this._calculateRotatedCoords(o.x,o.y,this._rotation),this.p.rotate(this._rotation)),o=this._calculateAlignedCoords(o.x,o.y),this.p.textAlign(this.p.LEFT,this.p.BASELINE),this.p.textFont(this._font),this.p.textSize(this._fontSize),this.p.text(this._text,o.x,o.y),e){this.p.stroke(200);var s=o.x+this._boundsOffset.x,n=o.y+this._boundsOffset.y;this.p.noFill(),this.p.rect(s,n,this.width,this.height)}this.p.pop()},o.prototype._calculateRotatedCoords=function(t,i,e){var o=Math.cos(e)*t+Math.cos(Math.PI/2-e)*i,s=-Math.sin(e)*t+Math.sin(Math.PI/2-e)*i;return{x:o,y:s}},o.prototype._calculateAlignedCoords=function(t,i){var e,s;switch(this._hAlign){case o.ALIGN.BOX_LEFT:e=t;break;case o.ALIGN.BOX_CENTER:e=t-this.halfWidth;break;case o.ALIGN.BOX_RIGHT:e=t-this.width;break;default:e=t,console.log("Unrecognized horizonal align:",this._hAlign)}switch(this._vAlign){case o.BASELINE.BOX_TOP:s=i-this._boundsOffset.y;break;case o.BASELINE.BOX_CENTER:s=i+this._distBaseToMid;break;case o.BASELINE.BOX_BOTTOM:s=i-this._distBaseToBottom;break;case o.BASELINE.FONT_CENTER:s=i-this._descent+(this._ascent+this._descent)/2;break;case o.BASELINE.ALPHABETIC:s=i;break;default:s=i,console.log("Unrecognized vertical align:",this._vAlign)}return{x:e,y:s}},o.prototype._calculateMetrics=function(t){var i=this._font.textBounds(this._text,1e3,1e3,this._fontSize);i={x:i.x-1e3,y:i.y-1e3,w:i.w,h:i.h},t&&(this._ascent=this._font._textAscent(this._fontSize),this._descent=this._font._textDescent(this._fontSize)),this.width=i.w,this.height=i.h,this.halfWidth=this.width/2,this.halfHeight=this.height/2,this._boundsOffset={x:i.x,y:i.y},this._distBaseToMid=Math.abs(i.y)-this.halfHeight,this._distBaseToBottom=this.height-Math.abs(i.y)}},{}]},{},[1])(1)});
//# sourceMappingURL=data:application/json;base64,
